router.post('/signup', (req, res) => {
    let obj = {
        email: req.body.email,
        password: req.body.password
    }
    //Check if user exists in the database already
    connection.query('SELECT * FROM users WHERE email = ?', [req.body.email], (err, result) => {
        if (err) throw err;
        if (result.length > 0) {
            console.log("user exists")
            res.status(400).send("user exists")
        }
        else {
            bcrypt.hash(req.body.password, 10, function (err, hash) {
                console.log("this is hash", hash)
                const user = {
                    id: uuid.v4(),
                    email: req.body.email,
                    password: hash
                }
                connection.query('INSERT INTO users SET ?', user, (err, result) => {
                    if (err) throw err;
                    console.log("user saved")
                })
            })
            res.send("user saved")
        }
    })

})



router.post('/login', (req, res) => {
    connection.query('SELECT * FROM users WHERE email = ?', [req.body.email], (err, result) => {
        if (err) throw err;
        console.log("this is result", result)
        const user = result[0]
        console.log("this is id", user)
        if (result.length > 0) {
            bcrypt.compare(req.body.password, result[0].password, function (err, result) {
                if (err) throw err;
                if (result) {
                    console.log("password correct,about to make a jwt")
                    let token = generateAccessToken(req.body.email)
                    console.log("this is token", token)
                    res.status(200).send({ status: "logged-in", token: token, id: user.id, points: user.points })
                }
                else {
                    res.status(401).send({ message: "password incorrect" })
                }
            })
        }
        else {
            res.status(404).send({ message: "user not found" })
        }
    })
})





router.post("/verify", (req, res) => {

    const token = req.body.token
    console.log("this is token", token)
    let result = verifyAccessToken(token)
    if (result.result == "success") {
        const email = result.decoded.email
        connection.query('SELECT * FROM users WHERE email = ?', [email], (err, result) => {
            if (err) throw err;
            if (result.length > 0) {
                console.log("user exists")
                res.status(200).send(result)
            }
            else {
                res.status(400).send("user does not exist")
            }
        })

    }
    else {
        res.status(401).send("token is invalid")
    }
})



router.post("/recents", (req, res) => {

    //check if there is a recent already for this user and machine
    //if there is, just update the lastused date
    //if there isn't, insert a new recent machine
    let response = null;
    let noData = false
    //check if exists
    console.log("this is req.body", req.body)
    const sql1 = `SELECT * FROM recents WHERE userid = "${req.body.userid}" AND machineid = ${req.body.machineid}`
    connection.query(sql1, (err, result) => {
        if (err) res.status(500).send(err);

        //if there is a result, update the lastused date
        if (result.length > 0) {
            const sql2 = `update recents set lastused = "${new Date().toISOString().slice(0, 19).replace('T', ' ')}" where userid = "${req.body.userid}" and machineid = ${req.body.machineid}`
            connection.query(sql2, (err, result2) => {
                console.log("updated lastused date")
                res.status(200).send(result2)
            })
        }
        //if there is no result, insert a new recent
        else {
            const sql3 = `Insert into recents (machineid, userid) values (${req.body.machineid}, "${req.body.userid}")`
            connection.query(sql3, (err, result3) => {
                console.log("inserted new recent")
                res.status(201).send(result3)
            })
        }
    })

})

router.post("/complete", (req, res) => {

    //check if there exists a completed machine for this user and machine
    let userid = req.body.userid
    let machineid = req.body.machineid
    connection.query(`Insert into completed (machineid,userid) values (${machineid},"${userid}")`, (err, result) => {
        if (err) throw err;
        console.log("inserted new completed machine")
        res.status(201).send(result)
    })

    connection.query(`Select * from machines where machines.id = ${machineid}`, (err, result) => {
        if (err) throw err;
        let points = result[0].points
        connection.query(`Select * from users where users.id = "${userid}"`, (err, result) => {
            let user = result[0]
            let newPoints = user.points + points
            connection.query(`Update users set points = ${newPoints} where users.id = "${userid}"`, (err, result) => {
                if (err) throw err;
                console.log("updated points")
            })
        })
    })
})
